import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "@/lib/store";
import { User } from "@prisma/client";
import axios from "axios";

export interface UserState {
  authUser: User | null;
}

const initialState: UserState = {
  authUser: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAuthUserAsync = createAsyncThunk(
  "user/fetchAuthUser",
  async () => {
    const usersReq = await axios.get("http://localhost:3000/api/user");
    const users = usersReq.data.data;
    
    const currentUserTest = users[0];
    return currentUserTest;
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchAuthUserAsync.fulfilled, (state, action) => {
      state.authUser = action.payload as unknown as User;
    });
  },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: RootState) => state.user.authUser;

export default userSlice.reducer;
